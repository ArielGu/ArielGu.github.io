{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"eab92f6ebbc389e199137c9a4342eb9ee3576b27","modified":1539422292000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1535507170000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1535507170000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1535507170000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1535507170000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1535507170000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1535507170000},{"_id":"source/Nodejs/.DS_Store","hash":"f2c2ce5a80c52b57dee253837531c6cf3d441b2a","modified":1539421942000},{"_id":"source/Nodejs/Nginx初探.md","hash":"2e20781dfade1c4b7998aee63b96bc594e6c025a","modified":1538916141000},{"_id":"source/Nodejs/index.md","hash":"f2e5fefcd70ba30e6798d5618c8dc64d1228a7bf","modified":1537705691000},{"_id":"source/Nodejs/预渲染.md","hash":"6a9e9e0d7da156bf4ecc2d41fd0da3bf568fca97","modified":1539421882000},{"_id":"source/_posts/.DS_Store","hash":"11c9bae3bec80368d44bd7185bdff1a53585c2b9","modified":1539422292000},{"_id":"source/_posts/Module语法和加载方式.md","hash":"4af069d310b2001988899fc4005ac9fb3a4a8ffc","modified":1537702404000},{"_id":"source/_posts/My-First-Post.md","hash":"a3ad16418d07ed9830ef1ab50bb17f19969f4247","modified":1535872834000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1535507156000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1535507170000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1535507170000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1535507170000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1535507170000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1535507170000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1535507170000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1535507170000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1535507170000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1535507170000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1535507170000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1535507170000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1535507170000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1535507170000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1535507170000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1535507170000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1535507170000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1535507170000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535507170000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535507170000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1535507170000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1535507170000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1535507170000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1535507170000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1535507170000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1535507170000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1535507170000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1535507170000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1535507170000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1535507170000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535507170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1535507170000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1535507170000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1535507170000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1535507170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1535507170000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1535507170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1535507170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1535507170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1535507170000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1535507170000},{"_id":"public/2018/09/02/My-First-Post/index.html","hash":"ce3ad5d8c5f84e76083511c1c5aa23d17ae717af","modified":1539422303285},{"_id":"public/2018/08/29/hello-world/index.html","hash":"623c423f16dd67ca86bb467999aae0ccd88a9da7","modified":1539422303295},{"_id":"public/archives/index.html","hash":"735a18e842ed78be9b7bb7b60c20326d7971e0a2","modified":1539422303297},{"_id":"public/archives/2018/index.html","hash":"e78dfaa3dd099a4bb8730ae2c6001d4100f47f6c","modified":1539422303297},{"_id":"public/archives/2018/08/index.html","hash":"b83ea5b000cf83dd3e035cf4e0c9e9d15d520e6a","modified":1539422303298},{"_id":"public/archives/2018/09/index.html","hash":"00815543c4853e3cadfe470a3a5d68deed3e5112","modified":1539422303298},{"_id":"public/2018/09/02/Module语法和加载方式/index.html","hash":"4bfa3b4d1f61bdbb70b528b2926b585043c25074","modified":1539422303298},{"_id":"public/Nodejs/Nginx初探.html","hash":"6797bb961c08d129d449b24e585efa396eb34375","modified":1539422160559},{"_id":"public/Nodejs/预渲染.html","hash":"7b451667a3a45ba3be1562c75dba9c65805a92a0","modified":1539422160559},{"_id":"public/Nodejs/index.html","hash":"57d19539358c7892bed37ac0736d1c487aa16b90","modified":1539422160560},{"_id":"public/index.html","hash":"5552997fe8177763d33481769ed83504e769003a","modified":1539422303298},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1539422160570},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1539422160570},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1539422160570},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1539422160570},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1539422160570},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1539422160571},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1539422160571},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1539422160571},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1539422160571},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1539422160571},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1539422161091},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1539422161099},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1539422161099},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1539422161099},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1539422161099},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1539422161100},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1539422161100},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1539422161100},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1539422161100},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1539422161100},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1539422161100},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1539422161101},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1539422161101},{"_id":"source/_posts/Nodejs/.DS_Store","hash":"f2c2ce5a80c52b57dee253837531c6cf3d441b2a","modified":1539421942000},{"_id":"source/_posts/Nodejs/Nginx初探.md","hash":"2e20781dfade1c4b7998aee63b96bc594e6c025a","modified":1538916141000},{"_id":"source/_posts/Nodejs/index.md","hash":"f2e5fefcd70ba30e6798d5618c8dc64d1228a7bf","modified":1537705691000},{"_id":"source/_posts/Nodejs/预渲染.md","hash":"6a9e9e0d7da156bf4ecc2d41fd0da3bf568fca97","modified":1539421882000},{"_id":"public/2018/10/13/Nodejs/预渲染/index.html","hash":"b0e2a7b11c272d8da2077c2a38c055de00b3e865","modified":1539422303300},{"_id":"public/2018/10/07/Nodejs/Nginx初探/index.html","hash":"31059c77331ec49c2160b5389f6b817fa2d6a7da","modified":1539422303300},{"_id":"public/2018/09/23/Nodejs/index/index.html","hash":"0a0e9bb92284905e197d71fd192f5896e0e92a26","modified":1539422303301},{"_id":"public/archives/2018/10/index.html","hash":"57006405f74b9714e1b47ee73664bd0e5f80f2c6","modified":1539422303301}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Module语法和加载方式","date":"2018-09-02T15:18:56.000Z","_content":"\n# 背景\n\nJavascript 没有模块的(module)体系，ES6前主要是CommonJs(用于服务器端)、AMD(用于浏览器)\n\nES6 的加载方式：编译时加载/静态加载（即在编译时就完成模块加载），效率自然是比CommonJs（运行时加载）高。\n\n# ES6\n1.import命令具有提升效果；\n\n2.由于import是静态执行，所以不能使用变量和表达式（这种智能在运行时得到结果的语法结构）\n\n```\n// 报错\nimport {'f'+'oo'} from 'my_module;\n```\n\n3.import 语句会执行所加载的模块，但不会输入任何值，并且不会加载多次\n\n```\nimport('../a.js),import()函数功能类似于Node的require 方法，区别在于：前者是异步加载，后者是同步加载\n```\n\n# Module 的加载方式\n1.浏览器加载js文件会阻塞线程，所以允许异步加载的方式\n\n```\n<script src='./myModule.js' defer></script>\n<script src='./myModule.js' async></script>\n```\n \n**区别：**defer 会等到整个页面正常渲染完成后执行；而async 一旦下载完成，渲染引擎终止，执行脚本后继续渲染。\n\n加载es6 模块，也可用\\<script\\>标签，但是要加type=\"module\"属性。\n\n```\n<script src='./myModule.js' type=\"module\"></script>\n<!-- 等同于 -->\n<script src='./myModule.js' defer></script>\n\n<script src='./myModule.js' type=\"module\" async></script>\n<!-- 等同于 -->\n<script src='./myModule.js' async></script>\n```\n\n2.ES6 模块和CommonJs模块的差异\n\n- CommonJs 模块输出的是值的复制；ES6模块输出的是值的引用\n\n```\n<!-- CommonJS lib.js -->\nvar counter = 3;\nfunction inCounter(){\n\tcounter++;\n}\nmodule.exports={\n\tcounter: counter,\n\tinCounter: inCounter\n}\n\n<!-- CommonJS main.js -->\nvar mod = require('./lib');\nmod.counter // 3\nmode.inCouter();\nmod.counter //3\n\n<!-- ES6 lib.js -->\nexport let counter = 3;\nexport function inCounter(){\n\tcounter++;\n}\n\n<!-- ES6 main.js -->\nimport {counter, inCounter} from './lib';\ncounter //3\ninCounter();\ncounter //4\n```\n\nES6 模块的运行机制和CommonJs不同。ES6模块中JS引擎对脚本静态分析是，遇到模块加载命令（import）就会生成一个只读引用，等脚本真正运行了才会根据引用到被加载的模块中取值。\n**所以ES6模块是动态引用，没有缓存**\n\n注：地址是只读的，不能重新赋值\n\n- CommonJS 模块是运行时加载，ES6模块是编译时输出接口\n\n# Node 加载\n1. Node 有自己的CommonJS 模块格式，与ES6 模块格式不兼容，目前的解决方案是将两者分开，采用各自的加载方案。静态分析阶段，脚本只要有一行import 或 export 语句，Node就会认为是ES6模块；\n\n## CommonJs模块和ES6模块互相加载\n- import 命令加载CommonJS 模块\n步骤一： module.exports 等同于 export.default\n\n```\n// a.js\nmodule.exports={\n\tfoo:'hello',\n\tbar:'world'\n}\n\n<!-- 等同于 -->\nexport.default={\n\tfoo:'hello',\n\tbar:'world'\n}\n\n//引用\n<!-- 写法一 -->\nimport baz from './a'\n<!-- 写法二 -->\nimport {default as baz} from './a'\n// 上面两种写法\n//baz={foo:'hello',bar:'world'}\n<!-- 写法三 -->\nimport * as baz from './a'\n// baz={\n//\tget default(){return module.exports;}\n//\tget foo(){ return this.default.foo }.bind(baz);\n//\tget bar(){ return this.default.bar }.bind(baz);\n//}\n```\n\n步骤二：ES6模块是在编译时确定输出接口，CommonJS模块是在运行时才确定输出接口，所以一下写法❌\n\n```\nimport {readfile} from 'fs';\n```\n- require 命令加载ES6\nES6 模块的所有输出接口都会成为输出对象的属性\n\n```\n// es.js\nlet foo = {bar:'my-default'};\nexport default foo;\nfoo=null;\n\n// commonJs.js\nconst es_namespace = require('./es');\nes_namespace.deault // {bar:'my-default'}\n```\n\n注：es.js 对foo重新赋值没有在模块外反应出来，原因就是CommonJS加载的缓存\n\n---\n## 实际的应用\n1.单页按需加载\n\n```\nconst listRoutes = [\n    {\n        path: 'list/:pageName',\n        getComponent: (location, cb) => {\n            require.ensure([], (require) => {\n                cb(null, require('components/List/ListContainer').default);\n            }, 'list');\n        },\n        onEnter: ({ params }) => {\n            pageEnter({ ...params, pageType: 'list' });\n        },\n    },\n];\n```\n\n2.Koa 项目中模块引用\n\n\n补充：\n1. CommonJS 的模块规范\n\ta). 模块定义\n\t\texports 是唯一导出当前模块方法或者变量的出口，exports是module的属性，一个文件就是一个模块；\n   b). Node 模块引入\n   路径分析  ——> 文件定位 ——> 编译执行\n   Node 模块分为核心模块(Node提供的模块)和文件模块(用户编写的模块)\n   核心模块在Node进程开启时直接加载进了内存，所以核心模块在引入时无需执行路径分析和文件定位\n2. \n\n\n","source":"_posts/Module语法和加载方式.md","raw":"---\ntitle: Module语法和加载方式\ndate: 2018-09-02 23:18:56\ntags:\n---\n\n# 背景\n\nJavascript 没有模块的(module)体系，ES6前主要是CommonJs(用于服务器端)、AMD(用于浏览器)\n\nES6 的加载方式：编译时加载/静态加载（即在编译时就完成模块加载），效率自然是比CommonJs（运行时加载）高。\n\n# ES6\n1.import命令具有提升效果；\n\n2.由于import是静态执行，所以不能使用变量和表达式（这种智能在运行时得到结果的语法结构）\n\n```\n// 报错\nimport {'f'+'oo'} from 'my_module;\n```\n\n3.import 语句会执行所加载的模块，但不会输入任何值，并且不会加载多次\n\n```\nimport('../a.js),import()函数功能类似于Node的require 方法，区别在于：前者是异步加载，后者是同步加载\n```\n\n# Module 的加载方式\n1.浏览器加载js文件会阻塞线程，所以允许异步加载的方式\n\n```\n<script src='./myModule.js' defer></script>\n<script src='./myModule.js' async></script>\n```\n \n**区别：**defer 会等到整个页面正常渲染完成后执行；而async 一旦下载完成，渲染引擎终止，执行脚本后继续渲染。\n\n加载es6 模块，也可用\\<script\\>标签，但是要加type=\"module\"属性。\n\n```\n<script src='./myModule.js' type=\"module\"></script>\n<!-- 等同于 -->\n<script src='./myModule.js' defer></script>\n\n<script src='./myModule.js' type=\"module\" async></script>\n<!-- 等同于 -->\n<script src='./myModule.js' async></script>\n```\n\n2.ES6 模块和CommonJs模块的差异\n\n- CommonJs 模块输出的是值的复制；ES6模块输出的是值的引用\n\n```\n<!-- CommonJS lib.js -->\nvar counter = 3;\nfunction inCounter(){\n\tcounter++;\n}\nmodule.exports={\n\tcounter: counter,\n\tinCounter: inCounter\n}\n\n<!-- CommonJS main.js -->\nvar mod = require('./lib');\nmod.counter // 3\nmode.inCouter();\nmod.counter //3\n\n<!-- ES6 lib.js -->\nexport let counter = 3;\nexport function inCounter(){\n\tcounter++;\n}\n\n<!-- ES6 main.js -->\nimport {counter, inCounter} from './lib';\ncounter //3\ninCounter();\ncounter //4\n```\n\nES6 模块的运行机制和CommonJs不同。ES6模块中JS引擎对脚本静态分析是，遇到模块加载命令（import）就会生成一个只读引用，等脚本真正运行了才会根据引用到被加载的模块中取值。\n**所以ES6模块是动态引用，没有缓存**\n\n注：地址是只读的，不能重新赋值\n\n- CommonJS 模块是运行时加载，ES6模块是编译时输出接口\n\n# Node 加载\n1. Node 有自己的CommonJS 模块格式，与ES6 模块格式不兼容，目前的解决方案是将两者分开，采用各自的加载方案。静态分析阶段，脚本只要有一行import 或 export 语句，Node就会认为是ES6模块；\n\n## CommonJs模块和ES6模块互相加载\n- import 命令加载CommonJS 模块\n步骤一： module.exports 等同于 export.default\n\n```\n// a.js\nmodule.exports={\n\tfoo:'hello',\n\tbar:'world'\n}\n\n<!-- 等同于 -->\nexport.default={\n\tfoo:'hello',\n\tbar:'world'\n}\n\n//引用\n<!-- 写法一 -->\nimport baz from './a'\n<!-- 写法二 -->\nimport {default as baz} from './a'\n// 上面两种写法\n//baz={foo:'hello',bar:'world'}\n<!-- 写法三 -->\nimport * as baz from './a'\n// baz={\n//\tget default(){return module.exports;}\n//\tget foo(){ return this.default.foo }.bind(baz);\n//\tget bar(){ return this.default.bar }.bind(baz);\n//}\n```\n\n步骤二：ES6模块是在编译时确定输出接口，CommonJS模块是在运行时才确定输出接口，所以一下写法❌\n\n```\nimport {readfile} from 'fs';\n```\n- require 命令加载ES6\nES6 模块的所有输出接口都会成为输出对象的属性\n\n```\n// es.js\nlet foo = {bar:'my-default'};\nexport default foo;\nfoo=null;\n\n// commonJs.js\nconst es_namespace = require('./es');\nes_namespace.deault // {bar:'my-default'}\n```\n\n注：es.js 对foo重新赋值没有在模块外反应出来，原因就是CommonJS加载的缓存\n\n---\n## 实际的应用\n1.单页按需加载\n\n```\nconst listRoutes = [\n    {\n        path: 'list/:pageName',\n        getComponent: (location, cb) => {\n            require.ensure([], (require) => {\n                cb(null, require('components/List/ListContainer').default);\n            }, 'list');\n        },\n        onEnter: ({ params }) => {\n            pageEnter({ ...params, pageType: 'list' });\n        },\n    },\n];\n```\n\n2.Koa 项目中模块引用\n\n\n补充：\n1. CommonJS 的模块规范\n\ta). 模块定义\n\t\texports 是唯一导出当前模块方法或者变量的出口，exports是module的属性，一个文件就是一个模块；\n   b). Node 模块引入\n   路径分析  ——> 文件定位 ——> 编译执行\n   Node 模块分为核心模块(Node提供的模块)和文件模块(用户编写的模块)\n   核心模块在Node进程开启时直接加载进了内存，所以核心模块在引入时无需执行路径分析和文件定位\n2. \n\n\n","slug":"Module语法和加载方式","published":1,"updated":"2018-09-23T11:33:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn787gup0001406ydpzn329r","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>Javascript 没有模块的(module)体系，ES6前主要是CommonJs(用于服务器端)、AMD(用于浏览器)</p>\n<p>ES6 的加载方式：编译时加载/静态加载（即在编译时就完成模块加载），效率自然是比CommonJs（运行时加载）高。</p>\n<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><p>1.import命令具有提升效果；</p>\n<p>2.由于import是静态执行，所以不能使用变量和表达式（这种智能在运行时得到结果的语法结构）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 报错</span><br><span class=\"line\">import &#123;&apos;f&apos;+&apos;oo&apos;&#125; from &apos;my_module;</span><br></pre></td></tr></table></figure>\n<p>3.import 语句会执行所加载的模块，但不会输入任何值，并且不会加载多次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(&apos;../a.js),import()函数功能类似于Node的require 方法，区别在于：前者是异步加载，后者是同步加载</span><br></pre></td></tr></table></figure>\n<h1 id=\"Module-的加载方式\"><a href=\"#Module-的加载方式\" class=\"headerlink\" title=\"Module 的加载方式\"></a>Module 的加载方式</h1><p>1.浏览器加载js文件会阻塞线程，所以允许异步加载的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; defer&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>区别：</strong>defer 会等到整个页面正常渲染完成后执行；而async 一旦下载完成，渲染引擎终止，执行脚本后继续渲染。</p>\n<p>加载es6 模块，也可用\\&lt;script>标签，但是要加type=”module”属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 等同于 --&gt;</span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; defer&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; type=&quot;module&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 等同于 --&gt;</span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.ES6 模块和CommonJs模块的差异</p>\n<ul>\n<li>CommonJs 模块输出的是值的复制；ES6模块输出的是值的引用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- CommonJS lib.js --&gt;</span><br><span class=\"line\">var counter = 3;</span><br><span class=\"line\">function inCounter()&#123;</span><br><span class=\"line\">\tcounter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">\tcounter: counter,</span><br><span class=\"line\">\tinCounter: inCounter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- CommonJS main.js --&gt;</span><br><span class=\"line\">var mod = require(&apos;./lib&apos;);</span><br><span class=\"line\">mod.counter // 3</span><br><span class=\"line\">mode.inCouter();</span><br><span class=\"line\">mod.counter //3</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ES6 lib.js --&gt;</span><br><span class=\"line\">export let counter = 3;</span><br><span class=\"line\">export function inCounter()&#123;</span><br><span class=\"line\">\tcounter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ES6 main.js --&gt;</span><br><span class=\"line\">import &#123;counter, inCounter&#125; from &apos;./lib&apos;;</span><br><span class=\"line\">counter //3</span><br><span class=\"line\">inCounter();</span><br><span class=\"line\">counter //4</span><br></pre></td></tr></table></figure>\n<p>ES6 模块的运行机制和CommonJs不同。ES6模块中JS引擎对脚本静态分析是，遇到模块加载命令（import）就会生成一个只读引用，等脚本真正运行了才会根据引用到被加载的模块中取值。<br><strong>所以ES6模块是动态引用，没有缓存</strong></p>\n<p>注：地址是只读的，不能重新赋值</p>\n<ul>\n<li>CommonJS 模块是运行时加载，ES6模块是编译时输出接口</li>\n</ul>\n<h1 id=\"Node-加载\"><a href=\"#Node-加载\" class=\"headerlink\" title=\"Node 加载\"></a>Node 加载</h1><ol>\n<li>Node 有自己的CommonJS 模块格式，与ES6 模块格式不兼容，目前的解决方案是将两者分开，采用各自的加载方案。静态分析阶段，脚本只要有一行import 或 export 语句，Node就会认为是ES6模块；</li>\n</ol>\n<h2 id=\"CommonJs模块和ES6模块互相加载\"><a href=\"#CommonJs模块和ES6模块互相加载\" class=\"headerlink\" title=\"CommonJs模块和ES6模块互相加载\"></a>CommonJs模块和ES6模块互相加载</h2><ul>\n<li>import 命令加载CommonJS 模块<br>步骤一： module.exports 等同于 export.default</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">\tfoo:&apos;hello&apos;,</span><br><span class=\"line\">\tbar:&apos;world&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 等同于 --&gt;</span><br><span class=\"line\">export.default=&#123;</span><br><span class=\"line\">\tfoo:&apos;hello&apos;,</span><br><span class=\"line\">\tbar:&apos;world&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//引用</span><br><span class=\"line\">&lt;!-- 写法一 --&gt;</span><br><span class=\"line\">import baz from &apos;./a&apos;</span><br><span class=\"line\">&lt;!-- 写法二 --&gt;</span><br><span class=\"line\">import &#123;default as baz&#125; from &apos;./a&apos;</span><br><span class=\"line\">// 上面两种写法</span><br><span class=\"line\">//baz=&#123;foo:&apos;hello&apos;,bar:&apos;world&apos;&#125;</span><br><span class=\"line\">&lt;!-- 写法三 --&gt;</span><br><span class=\"line\">import * as baz from &apos;./a&apos;</span><br><span class=\"line\">// baz=&#123;</span><br><span class=\"line\">//\tget default()&#123;return module.exports;&#125;</span><br><span class=\"line\">//\tget foo()&#123; return this.default.foo &#125;.bind(baz);</span><br><span class=\"line\">//\tget bar()&#123; return this.default.bar &#125;.bind(baz);</span><br><span class=\"line\">//&#125;</span><br></pre></td></tr></table></figure>\n<p>步骤二：ES6模块是在编译时确定输出接口，CommonJS模块是在运行时才确定输出接口，所以一下写法❌</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;readfile&#125; from &apos;fs&apos;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>require 命令加载ES6<br>ES6 模块的所有输出接口都会成为输出对象的属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// es.js</span><br><span class=\"line\">let foo = &#123;bar:&apos;my-default&apos;&#125;;</span><br><span class=\"line\">export default foo;</span><br><span class=\"line\">foo=null;</span><br><span class=\"line\"></span><br><span class=\"line\">// commonJs.js</span><br><span class=\"line\">const es_namespace = require(&apos;./es&apos;);</span><br><span class=\"line\">es_namespace.deault // &#123;bar:&apos;my-default&apos;&#125;</span><br></pre></td></tr></table></figure>\n<p>注：es.js 对foo重新赋值没有在模块外反应出来，原因就是CommonJS加载的缓存</p>\n<hr>\n<h2 id=\"实际的应用\"><a href=\"#实际的应用\" class=\"headerlink\" title=\"实际的应用\"></a>实际的应用</h2><p>1.单页按需加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const listRoutes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: &apos;list/:pageName&apos;,</span><br><span class=\"line\">        getComponent: (location, cb) =&gt; &#123;</span><br><span class=\"line\">            require.ensure([], (require) =&gt; &#123;</span><br><span class=\"line\">                cb(null, require(&apos;components/List/ListContainer&apos;).default);</span><br><span class=\"line\">            &#125;, &apos;list&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onEnter: (&#123; params &#125;) =&gt; &#123;</span><br><span class=\"line\">            pageEnter(&#123; ...params, pageType: &apos;list&apos; &#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>2.Koa 项目中模块引用</p>\n<p>补充：</p>\n<ol>\n<li>CommonJS 的模块规范<br> a). 模块定义<pre><code>exports 是唯一导出当前模块方法或者变量的出口，exports是module的属性，一个文件就是一个模块；\n</code></pre>b). Node 模块引入<br>路径分析  ——&gt; 文件定位 ——&gt; 编译执行<br>Node 模块分为核心模块(Node提供的模块)和文件模块(用户编写的模块)<br>核心模块在Node进程开启时直接加载进了内存，所以核心模块在引入时无需执行路径分析和文件定位</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>Javascript 没有模块的(module)体系，ES6前主要是CommonJs(用于服务器端)、AMD(用于浏览器)</p>\n<p>ES6 的加载方式：编译时加载/静态加载（即在编译时就完成模块加载），效率自然是比CommonJs（运行时加载）高。</p>\n<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><p>1.import命令具有提升效果；</p>\n<p>2.由于import是静态执行，所以不能使用变量和表达式（这种智能在运行时得到结果的语法结构）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 报错</span><br><span class=\"line\">import &#123;&apos;f&apos;+&apos;oo&apos;&#125; from &apos;my_module;</span><br></pre></td></tr></table></figure>\n<p>3.import 语句会执行所加载的模块，但不会输入任何值，并且不会加载多次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(&apos;../a.js),import()函数功能类似于Node的require 方法，区别在于：前者是异步加载，后者是同步加载</span><br></pre></td></tr></table></figure>\n<h1 id=\"Module-的加载方式\"><a href=\"#Module-的加载方式\" class=\"headerlink\" title=\"Module 的加载方式\"></a>Module 的加载方式</h1><p>1.浏览器加载js文件会阻塞线程，所以允许异步加载的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; defer&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>区别：</strong>defer 会等到整个页面正常渲染完成后执行；而async 一旦下载完成，渲染引擎终止，执行脚本后继续渲染。</p>\n<p>加载es6 模块，也可用\\&lt;script>标签，但是要加type=”module”属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 等同于 --&gt;</span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; defer&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; type=&quot;module&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 等同于 --&gt;</span><br><span class=\"line\">&lt;script src=&apos;./myModule.js&apos; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.ES6 模块和CommonJs模块的差异</p>\n<ul>\n<li>CommonJs 模块输出的是值的复制；ES6模块输出的是值的引用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- CommonJS lib.js --&gt;</span><br><span class=\"line\">var counter = 3;</span><br><span class=\"line\">function inCounter()&#123;</span><br><span class=\"line\">\tcounter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">\tcounter: counter,</span><br><span class=\"line\">\tinCounter: inCounter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- CommonJS main.js --&gt;</span><br><span class=\"line\">var mod = require(&apos;./lib&apos;);</span><br><span class=\"line\">mod.counter // 3</span><br><span class=\"line\">mode.inCouter();</span><br><span class=\"line\">mod.counter //3</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ES6 lib.js --&gt;</span><br><span class=\"line\">export let counter = 3;</span><br><span class=\"line\">export function inCounter()&#123;</span><br><span class=\"line\">\tcounter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ES6 main.js --&gt;</span><br><span class=\"line\">import &#123;counter, inCounter&#125; from &apos;./lib&apos;;</span><br><span class=\"line\">counter //3</span><br><span class=\"line\">inCounter();</span><br><span class=\"line\">counter //4</span><br></pre></td></tr></table></figure>\n<p>ES6 模块的运行机制和CommonJs不同。ES6模块中JS引擎对脚本静态分析是，遇到模块加载命令（import）就会生成一个只读引用，等脚本真正运行了才会根据引用到被加载的模块中取值。<br><strong>所以ES6模块是动态引用，没有缓存</strong></p>\n<p>注：地址是只读的，不能重新赋值</p>\n<ul>\n<li>CommonJS 模块是运行时加载，ES6模块是编译时输出接口</li>\n</ul>\n<h1 id=\"Node-加载\"><a href=\"#Node-加载\" class=\"headerlink\" title=\"Node 加载\"></a>Node 加载</h1><ol>\n<li>Node 有自己的CommonJS 模块格式，与ES6 模块格式不兼容，目前的解决方案是将两者分开，采用各自的加载方案。静态分析阶段，脚本只要有一行import 或 export 语句，Node就会认为是ES6模块；</li>\n</ol>\n<h2 id=\"CommonJs模块和ES6模块互相加载\"><a href=\"#CommonJs模块和ES6模块互相加载\" class=\"headerlink\" title=\"CommonJs模块和ES6模块互相加载\"></a>CommonJs模块和ES6模块互相加载</h2><ul>\n<li>import 命令加载CommonJS 模块<br>步骤一： module.exports 等同于 export.default</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">\tfoo:&apos;hello&apos;,</span><br><span class=\"line\">\tbar:&apos;world&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 等同于 --&gt;</span><br><span class=\"line\">export.default=&#123;</span><br><span class=\"line\">\tfoo:&apos;hello&apos;,</span><br><span class=\"line\">\tbar:&apos;world&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//引用</span><br><span class=\"line\">&lt;!-- 写法一 --&gt;</span><br><span class=\"line\">import baz from &apos;./a&apos;</span><br><span class=\"line\">&lt;!-- 写法二 --&gt;</span><br><span class=\"line\">import &#123;default as baz&#125; from &apos;./a&apos;</span><br><span class=\"line\">// 上面两种写法</span><br><span class=\"line\">//baz=&#123;foo:&apos;hello&apos;,bar:&apos;world&apos;&#125;</span><br><span class=\"line\">&lt;!-- 写法三 --&gt;</span><br><span class=\"line\">import * as baz from &apos;./a&apos;</span><br><span class=\"line\">// baz=&#123;</span><br><span class=\"line\">//\tget default()&#123;return module.exports;&#125;</span><br><span class=\"line\">//\tget foo()&#123; return this.default.foo &#125;.bind(baz);</span><br><span class=\"line\">//\tget bar()&#123; return this.default.bar &#125;.bind(baz);</span><br><span class=\"line\">//&#125;</span><br></pre></td></tr></table></figure>\n<p>步骤二：ES6模块是在编译时确定输出接口，CommonJS模块是在运行时才确定输出接口，所以一下写法❌</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;readfile&#125; from &apos;fs&apos;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>require 命令加载ES6<br>ES6 模块的所有输出接口都会成为输出对象的属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// es.js</span><br><span class=\"line\">let foo = &#123;bar:&apos;my-default&apos;&#125;;</span><br><span class=\"line\">export default foo;</span><br><span class=\"line\">foo=null;</span><br><span class=\"line\"></span><br><span class=\"line\">// commonJs.js</span><br><span class=\"line\">const es_namespace = require(&apos;./es&apos;);</span><br><span class=\"line\">es_namespace.deault // &#123;bar:&apos;my-default&apos;&#125;</span><br></pre></td></tr></table></figure>\n<p>注：es.js 对foo重新赋值没有在模块外反应出来，原因就是CommonJS加载的缓存</p>\n<hr>\n<h2 id=\"实际的应用\"><a href=\"#实际的应用\" class=\"headerlink\" title=\"实际的应用\"></a>实际的应用</h2><p>1.单页按需加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const listRoutes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: &apos;list/:pageName&apos;,</span><br><span class=\"line\">        getComponent: (location, cb) =&gt; &#123;</span><br><span class=\"line\">            require.ensure([], (require) =&gt; &#123;</span><br><span class=\"line\">                cb(null, require(&apos;components/List/ListContainer&apos;).default);</span><br><span class=\"line\">            &#125;, &apos;list&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onEnter: (&#123; params &#125;) =&gt; &#123;</span><br><span class=\"line\">            pageEnter(&#123; ...params, pageType: &apos;list&apos; &#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>2.Koa 项目中模块引用</p>\n<p>补充：</p>\n<ol>\n<li>CommonJS 的模块规范<br> a). 模块定义<pre><code>exports 是唯一导出当前模块方法或者变量的出口，exports是module的属性，一个文件就是一个模块；\n</code></pre>b). Node 模块引入<br>路径分析  ——&gt; 文件定位 ——&gt; 编译执行<br>Node 模块分为核心模块(Node提供的模块)和文件模块(用户编写的模块)<br>核心模块在Node进程开启时直接加载进了内存，所以核心模块在引入时无需执行路径分析和文件定位</li>\n<li></li>\n</ol>\n"},{"title":"My First Post","date":"2018-09-02T07:20:34.000Z","_content":"","source":"_posts/My-First-Post.md","raw":"---\ntitle: My First Post\ndate: 2018-09-02 15:20:34\ntags:\n---\n","slug":"My-First-Post","published":1,"updated":"2018-09-02T07:20:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn787gv40003406yspor51z2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-08-29T01:45:56.000Z","updated":"2018-08-29T01:45:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn787gv90005406yo7n7ojcf","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Nginx初探","date":"2018-10-07T12:22:30.000Z","_content":"##正向代理 vs 反向代理\n\n所谓“正反向” 指的是代理的是客户端(正向)还是服务端(反向)。\n————————————————————————————————————\n正向代理：典型的例子就是代理器，它会把访问墙外服务器server的网页请求，代理到一个可以访问该网站的代理服务器proxy，这个代理服务器proxy把墙外服务器server上的网页内容获取，再转发给客户。\n\n反向代理：客户端发送的请求，想要访问server服务器上的内容。但将被发送到一个代理服务器proxy，这个代理服务器将把请求代理到和自己属于同一个LAN下的内部服务器上，而用户真正想获得的内容就储存在这些内部服务器上。\n\n反向代理的优势：1）安全及权限；2）负载均衡。\n\nhttps://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension","source":"_posts/Nodejs/Nginx初探.md","raw":"---\ntitle: Nginx初探\ndate: 2018-10-07 20:22:30\ntags:\n---\n##正向代理 vs 反向代理\n\n所谓“正反向” 指的是代理的是客户端(正向)还是服务端(反向)。\n————————————————————————————————————\n正向代理：典型的例子就是代理器，它会把访问墙外服务器server的网页请求，代理到一个可以访问该网站的代理服务器proxy，这个代理服务器proxy把墙外服务器server上的网页内容获取，再转发给客户。\n\n反向代理：客户端发送的请求，想要访问server服务器上的内容。但将被发送到一个代理服务器proxy，这个代理服务器将把请求代理到和自己属于同一个LAN下的内部服务器上，而用户真正想获得的内容就储存在这些内部服务器上。\n\n反向代理的优势：1）安全及权限；2）负载均衡。\n\nhttps://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension","slug":"Nodejs/Nginx初探","published":1,"updated":"2018-10-07T12:42:21.000Z","_id":"cjn78a73300004d6ydqclaadd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>##正向代理 vs 反向代理</p>\n<p>所谓“正反向” 指的是代理的是客户端(正向)还是服务端(反向)。<br>————————————————————————————————————<br>正向代理：典型的例子就是代理器，它会把访问墙外服务器server的网页请求，代理到一个可以访问该网站的代理服务器proxy，这个代理服务器proxy把墙外服务器server上的网页内容获取，再转发给客户。</p>\n<p>反向代理：客户端发送的请求，想要访问server服务器上的内容。但将被发送到一个代理服务器proxy，这个代理服务器将把请求代理到和自己属于同一个LAN下的内部服务器上，而用户真正想获得的内容就储存在这些内部服务器上。</p>\n<p>反向代理的优势：1）安全及权限；2）负载均衡。</p>\n<p><a href=\"https://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##正向代理 vs 反向代理</p>\n<p>所谓“正反向” 指的是代理的是客户端(正向)还是服务端(反向)。<br>————————————————————————————————————<br>正向代理：典型的例子就是代理器，它会把访问墙外服务器server的网页请求，代理到一个可以访问该网站的代理服务器proxy，这个代理服务器proxy把墙外服务器server上的网页内容获取，再转发给客户。</p>\n<p>反向代理：客户端发送的请求，想要访问server服务器上的内容。但将被发送到一个代理服务器proxy，这个代理服务器将把请求代理到和自己属于同一个LAN下的内部服务器上，而用户真正想获得的内容就储存在这些内部服务器上。</p>\n<p>反向代理的优势：1）安全及权限；2）负载均衡。</p>\n<p><a href=\"https://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension</a></p>\n"},{"title":"网络编程","date":"2018-09-23T11:59:17.000Z","_content":"### WebSocket\n\n优势：\n\n- WebSocket客户端基于事件的编程模式和Node中的自定义事件类似\n- 实现了客户端和服务器之间的长连接，擅长处理大量高并发的客户端连接处理\n- 相较于HTTP只建立了一个TCP（协议轻量），实现双向传播\n\n实践方案：\n Node端：socket-io\n Client端：socket.io-client\n \n 注意：1）挂载在HTTP Server 上\n \t   2）监听WebSocket 事件\n","source":"_posts/Nodejs/index.md","raw":"---\ntitle: 网络编程\ndate: 2018-09-23 19:59:17\n---\n### WebSocket\n\n优势：\n\n- WebSocket客户端基于事件的编程模式和Node中的自定义事件类似\n- 实现了客户端和服务器之间的长连接，擅长处理大量高并发的客户端连接处理\n- 相较于HTTP只建立了一个TCP（协议轻量），实现双向传播\n\n实践方案：\n Node端：socket-io\n Client端：socket.io-client\n \n 注意：1）挂载在HTTP Server 上\n \t   2）监听WebSocket 事件\n","slug":"Nodejs/index","published":1,"updated":"2018-09-23T12:28:11.000Z","_id":"cjn78a73500014d6ywkqnt17n","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>优势：</p>\n<ul>\n<li>WebSocket客户端基于事件的编程模式和Node中的自定义事件类似</li>\n<li>实现了客户端和服务器之间的长连接，擅长处理大量高并发的客户端连接处理</li>\n<li>相较于HTTP只建立了一个TCP（协议轻量），实现双向传播</li>\n</ul>\n<p>实践方案：<br> Node端：socket-io<br> Client端：socket.io-client</p>\n<p> 注意：1）挂载在HTTP Server 上<br>        2）监听WebSocket 事件</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>优势：</p>\n<ul>\n<li>WebSocket客户端基于事件的编程模式和Node中的自定义事件类似</li>\n<li>实现了客户端和服务器之间的长连接，擅长处理大量高并发的客户端连接处理</li>\n<li>相较于HTTP只建立了一个TCP（协议轻量），实现双向传播</li>\n</ul>\n<p>实践方案：<br> Node端：socket-io<br> Client端：socket.io-client</p>\n<p> 注意：1）挂载在HTTP Server 上<br>        2）监听WebSocket 事件</p>\n"},{"title":"预渲染","date":"2018-10-13T09:10:35.000Z","_content":"\nReact 和 Vue 框架的开发思想真正做到了前后端分离，并且其中单页应用给用户带来了更好的体验。不过其HTML in JS  的思路在首屏加载慢、白屏以及SEO等问题中日益突出。\n\n目前主流处理首屏加载慢的解决方案：1. Server-Side Rendering(SSR) ；2. Prerendering\n\nSSR 的应用需要考虑在服务端 Node.js 环境中的内存泄露、运行速度、并发压力等问题... 所以如果对一些项目已经比较稳定、且迭代幅度不大的项目并不适合采用服务器端渲染的方式。\n\n此外本文主要介绍Prerendering，之后会单独介绍SSR ✌️\n\nPrerendering\n\n整体思路：\n\n    利用 Webpack 的第三方插件prerender-spa-plugin，在编译应用的过程中在特定的时间(或事件节点)生成静态页面，建立对应的索引路径。\n\n使用：\n\n```\nconst PrerenderSPAPlugin = require('prerender-spa-plugin');\nconst Renderer = PrerenderSPAPlugin.PuppeteerRenderer;\n\nmodule.exports = {\n    plugins: [\n        new PrerenderSPAPlugin({\n            staticDir: path.join(__dirname, 'dist'),\n            routes: [ '/', '/about', '/contact' ],\n            renderer: \n                new Renderer({\n                    inject: {\n                        foo: 'bar'\n                    },\n                    renderAfterDocumentEvent: 'render-event'\n                })\n            })\n        ])\n    ]\n}\n\n```\n\n- staticDir: 预渲染输出页面地址\n\n- routes：需要预渲染的路由地址\n\n- renderer：采用的渲染引擎是什么，目前v3.4.0支持 Puppeteer Renderer\n\n    a. inject:预渲染过程中能获取到的值 ==**[Important]**==\n    [注：使用方法]\n    \n    ```\n    showMessage(){\n        if(window.__PRERENDER_INJECTED && window.__PRERENDER_INJECTED.foo     =='bar')     return;\n        this.message = '我是测试预加载拦截';\n    }\n\n    ```\n    \n    b.renderAfterDocumentEvent: 监听document.dispatchEvent 事件，决定什么时候开始渲染\n    ```\n    document.dispatchEvent(new Event('render-event'))\n    ```\n    \n实践过程\n\n因为日常的项目开发主要是基于React 框架，且没有介入Node 层，所以为了优化首屏渲染慢的问题，采用了Prerendering 预渲染的方法。下面总结下在项目应用中存在的问题\n\n1.虽然预渲染生成了初始的页面结构，避免了首屏中js的加载运行时间带来的白屏时间长的问题。但是在react-redux 中渲染中状态树的存储导致了二次渲染的问题\n\n问题描述：预渲染中最终渲染的页面其状态树并没有保存，导致js文件执行后其状态树初始下为空，页面白屏重新渲染。\n\n解决思路：\n1. 将预渲染最终截取阶段的 redux 树上的状态挂载在 window__INIT_STATE__ 上；\n\n 【两个问题：如何获取redux 的所有状态数；什么时机触发 window.__INIT_STATE__的更新】\n2. 通过中间件的方式在预渲染中没触发action 就重新挂载 window.__INIT_STATE__；\n3. 在浏览器端重新执行js时，将window.__INIT_STATE__ 作为initalState 挂载到redux中\n\n具体实现：\n\n    - 中间件：\n    \n   \n```\nexport default (store) => (next) => (action) => {\n    console.log(`==========${store.getState()}============`);\n    next(action);\n    window.INIT_DATA = store.getState();\n};\n```\n\n    - redux 挂载\n    \n    \n```\nconst store = createStore(combineReducers(reducers), window.INIT_DATA, compose(\n    applyMiddleware(thunk, routing),\n```\n\n    - 触发prerendering时机\n    \n    \n```\nconst fragment = document.createDocumentFragment();\nconst scriptNode = document.createElement('script');\nscriptNode.type = 'text/javascript';\nscriptNode.text = `window.INIT_DATA = ${JSON.stringify(this.props)}`;\nscriptNode.text = `window.INIT_DATA = ${JSON.stringify(window.INIT_DATA || '{}')}`;\nfragment.appendChild(scriptNode);\ndocument.getElementsByTagName('head')[0].appendChild(fragment);\ndocument.dispatchEvent(new Event('custom-render-trigger'));\n```\n\n\n\n\n\n    \n    \n    ","source":"_posts/Nodejs/预渲染.md","raw":"---\ntitle: 预渲染\ndate: 2018-10-13 17:10:35\ntags:\n---\n\nReact 和 Vue 框架的开发思想真正做到了前后端分离，并且其中单页应用给用户带来了更好的体验。不过其HTML in JS  的思路在首屏加载慢、白屏以及SEO等问题中日益突出。\n\n目前主流处理首屏加载慢的解决方案：1. Server-Side Rendering(SSR) ；2. Prerendering\n\nSSR 的应用需要考虑在服务端 Node.js 环境中的内存泄露、运行速度、并发压力等问题... 所以如果对一些项目已经比较稳定、且迭代幅度不大的项目并不适合采用服务器端渲染的方式。\n\n此外本文主要介绍Prerendering，之后会单独介绍SSR ✌️\n\nPrerendering\n\n整体思路：\n\n    利用 Webpack 的第三方插件prerender-spa-plugin，在编译应用的过程中在特定的时间(或事件节点)生成静态页面，建立对应的索引路径。\n\n使用：\n\n```\nconst PrerenderSPAPlugin = require('prerender-spa-plugin');\nconst Renderer = PrerenderSPAPlugin.PuppeteerRenderer;\n\nmodule.exports = {\n    plugins: [\n        new PrerenderSPAPlugin({\n            staticDir: path.join(__dirname, 'dist'),\n            routes: [ '/', '/about', '/contact' ],\n            renderer: \n                new Renderer({\n                    inject: {\n                        foo: 'bar'\n                    },\n                    renderAfterDocumentEvent: 'render-event'\n                })\n            })\n        ])\n    ]\n}\n\n```\n\n- staticDir: 预渲染输出页面地址\n\n- routes：需要预渲染的路由地址\n\n- renderer：采用的渲染引擎是什么，目前v3.4.0支持 Puppeteer Renderer\n\n    a. inject:预渲染过程中能获取到的值 ==**[Important]**==\n    [注：使用方法]\n    \n    ```\n    showMessage(){\n        if(window.__PRERENDER_INJECTED && window.__PRERENDER_INJECTED.foo     =='bar')     return;\n        this.message = '我是测试预加载拦截';\n    }\n\n    ```\n    \n    b.renderAfterDocumentEvent: 监听document.dispatchEvent 事件，决定什么时候开始渲染\n    ```\n    document.dispatchEvent(new Event('render-event'))\n    ```\n    \n实践过程\n\n因为日常的项目开发主要是基于React 框架，且没有介入Node 层，所以为了优化首屏渲染慢的问题，采用了Prerendering 预渲染的方法。下面总结下在项目应用中存在的问题\n\n1.虽然预渲染生成了初始的页面结构，避免了首屏中js的加载运行时间带来的白屏时间长的问题。但是在react-redux 中渲染中状态树的存储导致了二次渲染的问题\n\n问题描述：预渲染中最终渲染的页面其状态树并没有保存，导致js文件执行后其状态树初始下为空，页面白屏重新渲染。\n\n解决思路：\n1. 将预渲染最终截取阶段的 redux 树上的状态挂载在 window__INIT_STATE__ 上；\n\n 【两个问题：如何获取redux 的所有状态数；什么时机触发 window.__INIT_STATE__的更新】\n2. 通过中间件的方式在预渲染中没触发action 就重新挂载 window.__INIT_STATE__；\n3. 在浏览器端重新执行js时，将window.__INIT_STATE__ 作为initalState 挂载到redux中\n\n具体实现：\n\n    - 中间件：\n    \n   \n```\nexport default (store) => (next) => (action) => {\n    console.log(`==========${store.getState()}============`);\n    next(action);\n    window.INIT_DATA = store.getState();\n};\n```\n\n    - redux 挂载\n    \n    \n```\nconst store = createStore(combineReducers(reducers), window.INIT_DATA, compose(\n    applyMiddleware(thunk, routing),\n```\n\n    - 触发prerendering时机\n    \n    \n```\nconst fragment = document.createDocumentFragment();\nconst scriptNode = document.createElement('script');\nscriptNode.type = 'text/javascript';\nscriptNode.text = `window.INIT_DATA = ${JSON.stringify(this.props)}`;\nscriptNode.text = `window.INIT_DATA = ${JSON.stringify(window.INIT_DATA || '{}')}`;\nfragment.appendChild(scriptNode);\ndocument.getElementsByTagName('head')[0].appendChild(fragment);\ndocument.dispatchEvent(new Event('custom-render-trigger'));\n```\n\n\n\n\n\n    \n    \n    ","slug":"Nodejs/预渲染","published":1,"updated":"2018-10-13T09:11:22.000Z","_id":"cjn78a73800024d6y4eb7qcc5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>React 和 Vue 框架的开发思想真正做到了前后端分离，并且其中单页应用给用户带来了更好的体验。不过其HTML in JS  的思路在首屏加载慢、白屏以及SEO等问题中日益突出。</p>\n<p>目前主流处理首屏加载慢的解决方案：1. Server-Side Rendering(SSR) ；2. Prerendering</p>\n<p>SSR 的应用需要考虑在服务端 Node.js 环境中的内存泄露、运行速度、并发压力等问题… 所以如果对一些项目已经比较稳定、且迭代幅度不大的项目并不适合采用服务器端渲染的方式。</p>\n<p>此外本文主要介绍Prerendering，之后会单独介绍SSR ✌️</p>\n<p>Prerendering</p>\n<p>整体思路：</p>\n<pre><code>利用 Webpack 的第三方插件prerender-spa-plugin，在编译应用的过程中在特定的时间(或事件节点)生成静态页面，建立对应的索引路径。\n</code></pre><p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const PrerenderSPAPlugin = require(&apos;prerender-spa-plugin&apos;);</span><br><span class=\"line\">const Renderer = PrerenderSPAPlugin.PuppeteerRenderer;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new PrerenderSPAPlugin(&#123;</span><br><span class=\"line\">            staticDir: path.join(__dirname, &apos;dist&apos;),</span><br><span class=\"line\">            routes: [ &apos;/&apos;, &apos;/about&apos;, &apos;/contact&apos; ],</span><br><span class=\"line\">            renderer: </span><br><span class=\"line\">                new Renderer(&#123;</span><br><span class=\"line\">                    inject: &#123;</span><br><span class=\"line\">                        foo: &apos;bar&apos;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    renderAfterDocumentEvent: &apos;render-event&apos;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>staticDir: 预渲染输出页面地址</p>\n</li>\n<li><p>routes：需要预渲染的路由地址</p>\n</li>\n<li><p>renderer：采用的渲染引擎是什么，目前v3.4.0支持 Puppeteer Renderer</p>\n<p>  a. inject:预渲染过程中能获取到的值 ==<strong>[Important]</strong>==<br>  [注：使用方法]</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showMessage()&#123;</span><br><span class=\"line\">    if(window.__PRERENDER_INJECTED &amp;&amp; window.__PRERENDER_INJECTED.foo     ==&apos;bar&apos;)     return;</span><br><span class=\"line\">    this.message = &apos;我是测试预加载拦截&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>b.renderAfterDocumentEvent: 监听document.dispatchEvent 事件，决定什么时候开始渲染\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.dispatchEvent(new Event(&apos;render-event&apos;))</span><br></pre></td></tr></table></figure>\n</code></pre><p>实践过程</p>\n<p>因为日常的项目开发主要是基于React 框架，且没有介入Node 层，所以为了优化首屏渲染慢的问题，采用了Prerendering 预渲染的方法。下面总结下在项目应用中存在的问题</p>\n<p>1.虽然预渲染生成了初始的页面结构，避免了首屏中js的加载运行时间带来的白屏时间长的问题。但是在react-redux 中渲染中状态树的存储导致了二次渲染的问题</p>\n<p>问题描述：预渲染中最终渲染的页面其状态树并没有保存，导致js文件执行后其状态树初始下为空，页面白屏重新渲染。</p>\n<p>解决思路：</p>\n<ol>\n<li><p>将预渲染最终截取阶段的 redux 树上的状态挂载在 window__INIT_STATE__ 上；</p>\n<p>【两个问题：如何获取redux 的所有状态数；什么时机触发 window.<strong>INIT_STATE</strong>的更新】</p>\n</li>\n<li>通过中间件的方式在预渲染中没触发action 就重新挂载 window.<strong>INIT_STATE</strong>；</li>\n<li>在浏览器端重新执行js时，将window.<strong>INIT_STATE</strong> 作为initalState 挂载到redux中</li>\n</ol>\n<p>具体实现：</p>\n<pre><code>- 中间件：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default (store) =&gt; (next) =&gt; (action) =&gt; &#123;</span><br><span class=\"line\">    console.log(`==========$&#123;store.getState()&#125;============`);</span><br><span class=\"line\">    next(action);</span><br><span class=\"line\">    window.INIT_DATA = store.getState();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<pre><code>- redux 挂载\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = createStore(combineReducers(reducers), window.INIT_DATA, compose(</span><br><span class=\"line\">    applyMiddleware(thunk, routing),</span><br></pre></td></tr></table></figure>\n<pre><code>- 触发prerendering时机\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fragment = document.createDocumentFragment();</span><br><span class=\"line\">const scriptNode = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">scriptNode.type = &apos;text/javascript&apos;;</span><br><span class=\"line\">scriptNode.text = `window.INIT_DATA = $&#123;JSON.stringify(this.props)&#125;`;</span><br><span class=\"line\">scriptNode.text = `window.INIT_DATA = $&#123;JSON.stringify(window.INIT_DATA || &apos;&#123;&#125;&apos;)&#125;`;</span><br><span class=\"line\">fragment.appendChild(scriptNode);</span><br><span class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(fragment);</span><br><span class=\"line\">document.dispatchEvent(new Event(&apos;custom-render-trigger&apos;));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>React 和 Vue 框架的开发思想真正做到了前后端分离，并且其中单页应用给用户带来了更好的体验。不过其HTML in JS  的思路在首屏加载慢、白屏以及SEO等问题中日益突出。</p>\n<p>目前主流处理首屏加载慢的解决方案：1. Server-Side Rendering(SSR) ；2. Prerendering</p>\n<p>SSR 的应用需要考虑在服务端 Node.js 环境中的内存泄露、运行速度、并发压力等问题… 所以如果对一些项目已经比较稳定、且迭代幅度不大的项目并不适合采用服务器端渲染的方式。</p>\n<p>此外本文主要介绍Prerendering，之后会单独介绍SSR ✌️</p>\n<p>Prerendering</p>\n<p>整体思路：</p>\n<pre><code>利用 Webpack 的第三方插件prerender-spa-plugin，在编译应用的过程中在特定的时间(或事件节点)生成静态页面，建立对应的索引路径。\n</code></pre><p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const PrerenderSPAPlugin = require(&apos;prerender-spa-plugin&apos;);</span><br><span class=\"line\">const Renderer = PrerenderSPAPlugin.PuppeteerRenderer;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new PrerenderSPAPlugin(&#123;</span><br><span class=\"line\">            staticDir: path.join(__dirname, &apos;dist&apos;),</span><br><span class=\"line\">            routes: [ &apos;/&apos;, &apos;/about&apos;, &apos;/contact&apos; ],</span><br><span class=\"line\">            renderer: </span><br><span class=\"line\">                new Renderer(&#123;</span><br><span class=\"line\">                    inject: &#123;</span><br><span class=\"line\">                        foo: &apos;bar&apos;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    renderAfterDocumentEvent: &apos;render-event&apos;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>staticDir: 预渲染输出页面地址</p>\n</li>\n<li><p>routes：需要预渲染的路由地址</p>\n</li>\n<li><p>renderer：采用的渲染引擎是什么，目前v3.4.0支持 Puppeteer Renderer</p>\n<p>  a. inject:预渲染过程中能获取到的值 ==<strong>[Important]</strong>==<br>  [注：使用方法]</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showMessage()&#123;</span><br><span class=\"line\">    if(window.__PRERENDER_INJECTED &amp;&amp; window.__PRERENDER_INJECTED.foo     ==&apos;bar&apos;)     return;</span><br><span class=\"line\">    this.message = &apos;我是测试预加载拦截&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>b.renderAfterDocumentEvent: 监听document.dispatchEvent 事件，决定什么时候开始渲染\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.dispatchEvent(new Event(&apos;render-event&apos;))</span><br></pre></td></tr></table></figure>\n</code></pre><p>实践过程</p>\n<p>因为日常的项目开发主要是基于React 框架，且没有介入Node 层，所以为了优化首屏渲染慢的问题，采用了Prerendering 预渲染的方法。下面总结下在项目应用中存在的问题</p>\n<p>1.虽然预渲染生成了初始的页面结构，避免了首屏中js的加载运行时间带来的白屏时间长的问题。但是在react-redux 中渲染中状态树的存储导致了二次渲染的问题</p>\n<p>问题描述：预渲染中最终渲染的页面其状态树并没有保存，导致js文件执行后其状态树初始下为空，页面白屏重新渲染。</p>\n<p>解决思路：</p>\n<ol>\n<li><p>将预渲染最终截取阶段的 redux 树上的状态挂载在 window__INIT_STATE__ 上；</p>\n<p>【两个问题：如何获取redux 的所有状态数；什么时机触发 window.<strong>INIT_STATE</strong>的更新】</p>\n</li>\n<li>通过中间件的方式在预渲染中没触发action 就重新挂载 window.<strong>INIT_STATE</strong>；</li>\n<li>在浏览器端重新执行js时，将window.<strong>INIT_STATE</strong> 作为initalState 挂载到redux中</li>\n</ol>\n<p>具体实现：</p>\n<pre><code>- 中间件：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default (store) =&gt; (next) =&gt; (action) =&gt; &#123;</span><br><span class=\"line\">    console.log(`==========$&#123;store.getState()&#125;============`);</span><br><span class=\"line\">    next(action);</span><br><span class=\"line\">    window.INIT_DATA = store.getState();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<pre><code>- redux 挂载\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = createStore(combineReducers(reducers), window.INIT_DATA, compose(</span><br><span class=\"line\">    applyMiddleware(thunk, routing),</span><br></pre></td></tr></table></figure>\n<pre><code>- 触发prerendering时机\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fragment = document.createDocumentFragment();</span><br><span class=\"line\">const scriptNode = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">scriptNode.type = &apos;text/javascript&apos;;</span><br><span class=\"line\">scriptNode.text = `window.INIT_DATA = $&#123;JSON.stringify(this.props)&#125;`;</span><br><span class=\"line\">scriptNode.text = `window.INIT_DATA = $&#123;JSON.stringify(window.INIT_DATA || &apos;&#123;&#125;&apos;)&#125;`;</span><br><span class=\"line\">fragment.appendChild(scriptNode);</span><br><span class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(fragment);</span><br><span class=\"line\">document.dispatchEvent(new Event(&apos;custom-render-trigger&apos;));</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}